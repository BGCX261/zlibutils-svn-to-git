#ifndef ZLIBUTIS_USTR_HPP
#define ZLIBUTIS_USTR_HPP

#include <cstdlib>
#include <cstring>
#include <string>
#include <iostream>

#ifdef _MSC_VER 
#define strncpy(dest, orig, size) strncpy_s(dest, size, orig, size);
#endif

namespace utl
{
	namespace ustr
	{

	   /*
		* Url de Interes
		* UTF-8 Tabla : http://www.utf8-chartable.de/unicode-utf8-table.pl?utf8=0x
		* UTF-8 Wiki  : http://en.wikipedia.org/wiki/UTF-8
		*
		*/

		class uString
		{
		private:
			enum  {DIFF_BYTES = 2, OFFSET = 2};
			char* ptr;
			size_t capInBytes, lenInUChars, lenInBytes, npos;

		private:
			char* top()
			{			
				char* ptr_ = (this->ptr + this->lenInBytes) - OFFSET;
				while(sizeInOctets(*(ptr_)) == 0)			
					ptr_--;			
				return ptr_;
			}

		public:
			uString(void) : ptr(NULL), lenInUChars(0), capInBytes(0), lenInBytes(0), npos(1) {}

			template<typename T, size_t N> uString(T (&tx)[N])
			{
				lenInUChars = sizeInUChars(tx);
				lenInBytes = N;
				npos = capInBytes = lenInBytes + DIFF_BYTES;

				ptr = new char[capInBytes];
				memset(ptr, 0, capInBytes);
				strncpy(ptr, tx, lenInBytes);
			}

			uString(const char* tx, const size_t sizeInBytes)
			{
				lenInBytes = sizeInBytes;
				npos = capInBytes = lenInBytes + DIFF_BYTES;
				ptr = new char[capInBytes];
				memset(ptr, 0, capInBytes);
				strncpy(ptr, tx, lenInBytes);			
				lenInUChars = sizeInUChars(ptr);			
			}

			~uString(void)
			{
				lenInUChars = lenInBytes = capInBytes = 0;
				if (ptr != NULL)
				{
					delete[] ptr;
					ptr = NULL;
				}
			}

			uString(const uString& w)
			{
				if(this != &w)
				{
					this->lenInUChars = w.lenInUChars;
					this->lenInBytes = w.lenInBytes;
					this->npos = this->capInBytes = w.capInBytes;
					this->ptr = new char[this->capInBytes];
					memset(this->ptr, 0, this->capInBytes);
					strncpy(this->ptr, w.ptr, this->lenInBytes);
				}
			}

			uString& operator=(const uString& w)
			{
				if(this != &w)
				{
					if (this->lenInUChars != 0 && this->capInBytes != 0 && this->lenInBytes != 0 && this->ptr != NULL)
					{
						this->lenInUChars = this->lenInBytes = this->capInBytes = 0;	
						delete[] this->ptr;
						this->ptr = NULL;		
					}
					this->lenInUChars = w.lenInUChars;
					this->lenInBytes = w.lenInBytes;
					this->npos = this->capInBytes = w.capInBytes;
					this->ptr = new char[this->capInBytes];
					memset(this->ptr, 0, this->capInBytes);				
					strncpy(this->ptr, w.ptr, this->lenInBytes);;
				}
				return *this;
			}

			template<typename T, size_t N> uString& operator=(T (&tx)[N])
			{
				if (this->lenInUChars != 0 && this->capInBytes != 0 && this->lenInBytes != 0 && this->ptr != NULL)
				{
					this->lenInUChars = this->lenInBytes = this->capInBytes = 0;	
					delete[] this->ptr;
					this->ptr = NULL;		
				}

				lenInUChars = sizeInUChars(tx);
				lenInBytes = N;
				npos = capInBytes = lenInBytes + DIFF_BYTES;

				ptr = new char[capInBytes];
				memset(ptr, 0, capInBytes);
				strncpy(ptr, tx, lenInBytes);	

				return *this;
			}

			size_t sizeInChars(void)
			{
				return lenInUChars;
			}

			size_t sizeInBytes(void)
			{
				return lenInBytes;
			}

			size_t capacityInBytes(void)
			{
				return capInBytes;
			}

			size_t error(void)
			{
				return npos;
			}

			std::string str(void)
			{
				return std::string(ptr);
			}

			const char* c_str(void)
			{
				return ptr;
			}

			size_t find_first_of(const char* utx)
			{
				if (this->ptr == NULL) return this->error();
				unsigned char* ptr = (unsigned char*)utx;
				size_t pos = 0;
				while (*ptr != 0x00)
				{

				}

				return pos;
			}

			static size_t sizeInOctets(const char c)
			{
				if (( c & 0x80 ) == 0 )          // lead bit is zero, must be a single ascii: 1 octet
				{
					return 1;
				}
				else if (( c & 0xE0 ) == 0xC0 )  // 110x xxxx : 2 octets
				{
					return 2;
				}
				else if (( c & 0xF0 ) == 0xE0 )  // 1110 xxxx : 3 octets
				{
					return 3;
				}
				else if (( c & 0xF8 ) == 0xF0 )  // 1111 0xxx : 4 octets
				{
					return 4;
				}
				else                             // Unrecognized lead byte (%02x)
				{
					return 0;
				}
			}

			static size_t sizeInUChars(const char* utx)
			{
				unsigned char* ptr = (unsigned char*)utx;
				size_t len = 0;
				while (*ptr != 0x00)
				{
					switch (sizeInOctets(*ptr))
					{
						case 1:
							ptr++;
							len++;
							break;
						case 2:
							ptr += 2;
							len++;
							break;
						case 3:
							ptr += 3;
							len++;
							break;
						case 4:
							ptr += 4;
							len++;
							break;
						default:
							ptr++;
							break;
					}
				}

				return len;
			}			


		public:
			class iterator;
			friend class iterator;
			class iterator
			{

			private:

				uString& s;
				size_t indexInChars, indexInBytes;
				char* currPtr;

			public:

				iterator(uString& is) : s(is), indexInChars(0), indexInBytes(0), currPtr(is.ptr) {}
				iterator(uString& is, bool) : s(is), indexInChars(is.lenInUChars), indexInBytes(is.lenInBytes), currPtr(is.top()+1) {}

				const uString operator*()	
				{ 
					return uString(currPtr, s.sizeInOctets(*currPtr)); 
				
				}

				const uString operator++(int) // POSTFIX
				{
					char* TmpcurrPtr = currPtr;
		            currPtr += s.sizeInOctets(*currPtr);
					return uString(currPtr, s.sizeInOctets(*TmpcurrPtr));
				}
		        
				const uString operator++() // PREFIX
				{
					currPtr += s.sizeInOctets(*currPtr);
					return uString(currPtr, s.sizeInOctets(*currPtr));
				}

				bool operator!=(const iterator& rv) const
				{
		            return currPtr != rv.currPtr;
				}

				bool operator==(const iterator& rv) const
				{
					return currPtr == rv.currPtr;
				}
		        
		        iterator& operator=(const iterator& rv)
		        {
		            s = rv.s;
		            indexInChars = rv.indexInChars;
		            indexInBytes = rv.indexInBytes;
		            currPtr = rv.currPtr;
		            return *this;                
		        }
		        
				friend std::ostream& operator<<(std::ostream& os, const iterator& it) 
				{
					char ptr_[4];
					memset(ptr_, 0, 4);
					strncpy(&ptr_[0], it.currPtr, uString::sizeInOctets(*it.currPtr));
				
					return os << ptr_;
				}            
		        
		    private:
		        iterator& operator+=(int) 	{ return *this; }
		        iterator& operator-=(int) 	{ return *this; }
		        iterator& operator--(int) 	{ return *this; }            
		        iterator& operator->() 		{ return *this; }
			};

			iterator begin() 
			{ 
				return iterator(*this); 
			}

			iterator end() 
			{ 
				return iterator(*this, true); 
			}

		};

	}
}


#endif // ZLIBUTIS_USTR_HPP


